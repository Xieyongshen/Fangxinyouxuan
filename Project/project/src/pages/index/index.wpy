<style lang="less">
.index-content {
    padding: 0 30rpx;
    background: #ffffff;
}

.index-header {
    height: 75rpx;
    margin-bottom: 20rpx;
}

.index-shop {
    height: 75rpx;
    display: inline-block;
}

.index-icon-position {
    width: 26rpx;
    height: 39rpx;
    margin: 18rpx 0;
    vertical-align: top;
}

.shop-name {
    font-size: 28rpx;
    line-height: 75rpx;
    margin-left: 20rpx;
    margin-right: 15rpx;
    display: inline-block;
    vertical-align: top;
}

.index-icon-down {
    width: 45rpx;
    height: 45rpx;
    margin-top: 18rpx;
    vertical-align: top;
}

.index-icon-search {
    width: 35rpx;
    height: 35rpx;
    margin-top: 20rpx;
    vertical-align: top;
    float: right;
}

.banner-top {
    width: 690rpx;
    height: 280rpx;
    border-radius: 20rpx;
    background: #fdedeb;
}

.banner-left {
    width: 335rpx;
    height: 150rpx;
    margin: 10rpx 10rpx 20rpx 0;
    border-radius: 20rpx;
    background: #fdedeb;
}

.banner-right {
    width: 335rpx;
    height: 150rpx;
    margin: 10rpx 0 20rpx 10rpx;
    border-radius: 20rpx;
    background: #fdedeb;
}

.index-category {
    padding: 25rpx 0;
    display: flex;
    flex-direction: row;
}

.category-item {
    width: 100rpx;
    text-align: center;
    display: inline-block;
    .category-img {
        width: 72rpx;
        height: 62rpx;
        margin-bottom: 15rpx;
        box-sizing: border-box;
    }
    .category-title {
        font-size: 23rpx;
        line-height: 30rpx;
        display: block;
    }
}

.index-today,
.index-hot,
.index-selected {
    margin-top: 45rpx;
}

.today-title,
.hot-title,
.selected-title {
    font-size: 32rpx;
    line-height: 50rpx;
    text-align: center;
}

.today-time {
    width: 690rpx;
    height: 80rpx;
    color: #ffffff;
    font-size: 26rpx;
    line-height: 80rpx;
    letter-spacing: 5rpx;
    text-align: center;
    margin-top: 20rpx;
    margin-bottom: 10rpx;
    border-radius: 10rpx;
    text {
        line-height: 80rpx;
        display: inline-block;
        vertical-align: top;
    }
}

.today-time-num {
    font-size: 36rpx;
    font-weight: 600;
}

.today-item-remain {
    width: 250rpx;
    height: 20px;
    margin-top: 10rpx;
    padding: 0;
    border: 1px solid #fdd6d9;
    border-radius: 15px;
    box-sizing: border-box;
    overflow: hidden;
    position: relative;
    text {
        width: 250rpx;
        font-size: 26rpx;
        line-height: 18px;
        text-align: center;
        display: inline-block;
        position: absolute;
        top: 0;
        z-index: 20;
    }
}

.today-item-price {
    position: absolute;
    bottom: 0;
}

.today-price-cur {
    font-size: 24rpx;
    line-height: 30rpx;
    text {
        font-size: 30rpx;
        line-height: 40rpx;
    }
}

.today-price-ori {
    color: #999999;
    font-size: 22rpx;
    line-height: 30rpx;
    text {
        font-size: 24rpx;
        line-height: 35rpx;
        text-decoration: line-through;
    }
}

.index-banner-middle {
    width: 690rpx;
    height: 160rpx;
    border-radius: 20rpx;
    background: #fdedeb;
}

.hot-item-label,
.selected-item-label {
    width: 110rpx;
    height: 30rpx;
    margin: 5rpx;
    font-size: 24rpx;
    line-height: 30rpx;
    text-align: center;
    vertical-align: top;
    border-radius: 5rpx;
    display: inline-block;
}

.label-common {
    color: #cccccc;
    border: 1rpx solid #cccccc;
}

.label-member {
    color: #ffffff;
}

.hot-item-price,
.selected-item-price {
    position: absolute;
    left: 0;
    bottom: 15rpx;
}

.hot-item-oriPrice,
.selected-item-oriPrice {
    font-size: 26rpx;
    line-height: 30rpx;
}

.hot-item-curPrice,
.selected-item-curPrice {
    font-size: 32rpx;
    line-height: 40rpx;
    text {
        color: #999999;
        font-size: 22rpx;
        line-height: 30rpx;
        margin-left: 10rpx;
        text-decoration: line-through;
    }
}

.index-product {
    margin: 0 -30rpx;
}

.index-empty {
    color: #999999;
    font-size: 30rpx;
    line-height: 200rpx;
    text-align: center;
}
</style>
<template>
    <view class="container" style="padding-top:{{isIphoneX ? '87px' : '62px'}}">
        <navBar navTitle="放心优选" :isIphoneX.sync="isIphoneX"></navBar>
        <view class="index-content">
            <view class="index-header">
                <navigator url="../shop/shop" hover-class="none" class="index-shop">
                    <image src="/icons/position.png" class="index-icon-position" />
                    <text class="shop-name">{{shopChoose.name}}</text>
                    <image src="/icons/down.png" class="index-icon-down" />
                </navigator>
                <image src="/icons/search.png" class="index-icon-search" @tap="navToSearch" />
            </view>
            <view class="index-banner">
                <image src="{{banner[0]}}" mode="aspectFill" class="banner-top" />
                <image src="{{banner[1]}}" class="banner-left" />
                <image src="{{banner[2]}}" class="banner-right" />
            </view>
            <view class="index-category" style="justify-content: {{category.length > 4 ? 'space-between' : 'space-around'}};">
                <repeat for="{{category}}" key="index">
                    <view class="category-item" @tap="navToCategory({{item.title}}, {{item.id}})">
                        <image src="{{item.imgUrl}}" class="category-img" />
                        <text class="category-title">{{item.title}}</text>
                    </view>
                </repeat>
            </view>
            <view class="index-today">
                <view class="today-title">今日热卖</view>
                <view class="today-time" style="background:{{color.red}}">
                    <text>距离活动{{isStarted ? '结束' : '开始'}}还剩：</text>
                    <text class="today-time-num">{{countTime.day}}天{{countTime.hour}}时{{countTime.minute}}分{{countTime.second}}秒</text>
                </view>
                <repeat for="{{product.today}}" key="id">
                    <product :id.sync="item.id" :imgUrl.sync="item.imgUrl" :name.sync="item.name" :desc.sync="item.desc" class="index-product">
                        <view wx:if="{{item.remain > 0}}" slot="extra" class="today-item-remain">
                            <progress class="today-item-progress" percent="{{item.remain/item.count*100}}" stroke-width="20" activeColor="#fddddf" backgroundColor="#fffbfb" />
                            <text style="color:{{color.red}}">还剩{{item.remain}}份</text>
                        </view>
                        <view slot="price" class="today-item-price">
                            <view class="today-price-cur" style="color:{{color.yellow}}">限时价
                                <text>¥{{item.price}}</text>
                            </view>
                            <view wx:if="{{item.oriPrice > 0}}" class="today-price-ori">原价
                                <text>¥{{item.oriPrice}}</text>
                            </view>
                        </view>
                        <image slot="cart" src="/icons/cart-recommend.png" class="product-icon-cart" @tap.stop="chooseSpec(0, {{index}})" />
                    </product>
                </repeat>
                <view wx:if="{{!product.today}}" class="index-empty">暂无相关商品</view>
            </view>
            <image src="{{banner[3]}}" class="index-banner-middle" />
            <view class="index-hot">
                <view class="hot-title">热卖爆款</view>
                <repeat for="{{product.hot}}" key="id">
                    <product :id.sync="item.id" :imgUrl.sync="item.imgUrl" :name.sync="item.name" :desc.sync="item.desc" class="index-product">
                        <view wx:if="{{item.label != ''}}" slot="extra" class="hot-item-label label-common">{{item.label}}</view>
                        <view slot="price" class="hot-item-price">
                            <view wx:if="{{item.memberPrice > 0}}" class="hot-item-oriPrice" style="color:{{color.yellow}}">¥{{item.oriPrice}}
                                <view class="hot-item-label label-member" style="background:{{color.yellow}}">会员专享</view>
                            </view>
                            <view class="hot-item-curPrice" style="color:{{color.red}}">¥{{item.price}}
                                <text>¥{{item.oriPrice}}</text>
                            </view>
                        </view>
                        <image slot="cart" src="/icons/cart-recommend.png" class="product-icon-cart" @tap.stop="chooseSpec(1, {{index}})" />
                    </product>
                </repeat>
                <view wx:if="{{!product.hot}}" class="index-empty">暂无相关商品</view>
            </view>
            <image src="{{banner[4]}}" class="index-banner-middle" />
            <view class="index-selected">
                <view class="selected-title">放心精选</view>
                <repeat for="{{product.selected}}" key="id">
                    <product :id.sync="item.id" :imgUrl.sync="item.imgUrl" :name.sync="item.name" :desc.sync="item.desc" class="index-product">
                        <view wx:if="{{item.label != ''}}" slot="extra" class="selected-item-label label-common">{{item.label}}</view>
                        <view slot="price" class="selected-item-price">
                            <view wx:if="{{item.memberPrice > 0}}" class="selected-item-oriPrice" style="color:{{color.yellow}}">¥{{item.oriPrice}}
                                <view class="selected-item-label label-member" style="background:{{color.yellow}}">会员专享</view>
                            </view>
                            <view class="selected-item-curPrice" style="color:{{color.red}}">¥{{item.price}}
                                <text>¥{{item.oriPrice}}</text>
                            </view>
                        </view>
                        <image slot="cart" src="/icons/cart-recommend.png" class="product-icon-cart" @tap.stop="chooseSpec(2, {{index}})" />
                    </product>
                </repeat>
                <view wx:if="{{!product.selected}}" class="index-empty">暂无相关商品</view>
            </view>
        </view>
        <view wx:if="{{isChoosing}}" class="product-select" @tap="selectClose()">
            <view class="product-select-container" @tap.stop="selectContent()">
                <view class="product-select-close" @tap="selectClose()">×</view>
                <view class="product-select-content">
                    <image mode="aspectFill" src="{{curProduct.imgUrl}}" class="product-select-img" />
                    <view class="product-select-info">
                        <view class="product-select-name">{{curProduct.name}}</view>
                        <view class="product-select-price" style="color:{{color.red}}">￥{{curProduct.spec[specChoose].price}}</view>
                        <view class="product-select-remain">库存：{{curProduct.remain}}</view>
                    </view>
                    <view class="product-select-spec">
                        <view class="product-spec-title">规格：</view>
                        <view class="product-spec-content">
                            <repeat for="{{curProduct.spec}}" key="index">
                                <view class="product-spec-item" style="{{index == specChoose? 'color:' + color.red + ';border: 2rpx solid ' + color.red + ';' : ''}}" @tap="specChoose({{index}})">{{item.name}}</view>
                            </repeat>
                        </view>
                    </view>
                    <view class="product-select-count">
                        <text>数量：</text>
                        <view class="product-count-choose">
                            <view class="product-count-reduce" style="{{count > 1 ? 'color:' + color.red + ';' : ''}}" @tap="countMinus">-</view>
                            <input type="number" value="{{count}}" bindinput="countLimit" class="product-count-current" style="color:{{color.red}};" />
                            <view class="product-count-add" style="{{count < curProduct.remain ? 'color:' + color.red + ';' : ''}}" @tap="countPlus">+</view>
                        </view>
                    </view>
                    <view hover-class="navigator-hover" class="product-select-buy" style="background:{{color.red}}" @tap.stop="addToCart">加入购物车</view>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
import wepy from 'wepy';
import NavBar from '@/components/navBar';
import Product from '@/components/productBlock';
import api from '@/api/api';

export default class Index extends wepy.page {
    config = {};
    components = {
        navBar: NavBar,
        product: Product
        // spec: SpecChoose
    };

    data = {
        shopChoose: {
            id: '',
            name: ''
        },
        banner: [],
        category: [],
        product: {
            hot: [],
            today: [],
            selected: []
        },
        startTime: '',
        endTime: '',
        countTime: {
            day: 0,
            hour: 0,
            minute: 0,
            second: 0
        },
        isStarted: false,
        isChoosing: false,
        curProduct: {},
        specChoose: 0,
        count: 1,
        isIphoneX: false,
        color: {}
    };

    computed = {};

    methods = {
        navToSearch() {
            wx.navigateTo({
                url: '/pages/search/search'
            });
        },

        navToCategory(category, id, event) {
            wx.navigateTo({
                url:
                    '/pages/index/category/category?name=' +
                    category +
                    '&id=' +
                    id
            });
        },

        navToProduct(product, event) {
            wx.navigateTo({
                url: '/pages/product/product?id=' + product
            });
        },

        chooseSpec(type, index) {
            var self = this;
            if (type == 0) {
                self.curProduct = self.product.today[index];
            } else if (type == 1) {
                self.curProduct = self.product.hot[index];
            } else if (type == 2) {
                self.curProduct = self.product.selected[index];
            }
            self.specChoose = 0;
            self.count = 1;
            self.isChoosing = true;
            self.$apply();
        },

        specChoose(spec, e) {
            this.specChoose = spec;
            this.$apply();
        },

        selectClose() {
            this.isChoosing = false;
            this.$apply();
        },

        selectContent() {
            return;
        },

        countMinus() {
            if (this.count > 1) {
                this.count--;
                this.$apply();
            }
        },

        countPlus() {
            if (this.count < this.curProduct.remain) {
                this.count++;
                this.$apply();
            }
        },

        countLimit(e) {
            var count = e.detail.value;
            if (count == '' || count <= 1) {
                count = 1;
            } else if (count >= this.curProduct.remain) {
                count = this.curProduct.remain;
            }
            this.count = count;
            this.$apply();
            return count;
        },

        addToCart() {
            var self = this;
            var shoppingCart = wx.getStorageSync('shoppingCart');
            var hasCur = false;
            if (shoppingCart.length > 0) {
                shoppingCart.forEach(element => {
                    if (element.id == self.curProduct.id) {
                        hasCur = true;
                        element.count += self.count;
                        return;
                    }
                });
            } else {
                shoppingCart = [];
            }

            if (hasCur == false) {
                shoppingCart.push({
                    id: self.curProduct.id,
                    name: self.curProduct.name,
                    image: self.curProduct.imgUrl,
                    spec: self.curProduct.spec[self.specChoose].name,
                    price: self.curProduct.spec[self.specChoose].price,
                    oriPrice: self.curProduct.oriPrice,
                    remain: self.curProduct.remain,
                    count: self.count
                });
            }

            wx.setStorageSync('shoppingCart', shoppingCart);
            wx.showToast({
                title: '添加成功',
                icon: 'success',
                duration: 1000
            });

            this.isChoosing = false;
            this.$apply();
        }
    };

    events = {};

    timeFormat(param) {
        //小于10的格式化函数
        var format = parseInt(param);
        return format < 10 ? '0' + format : format;
    }

    countDown() {
        var self = this;
        let nowTime = new Date().getTime();
        let startTimeStr = self.startTime;
        let endTimeStr = self.endTime;
        startTimeStr = startTimeStr.replace(/\-/g, '/');
        endTimeStr = endTimeStr.replace(/\-/g, '/');
        console.log("index");
        console.log(startTimeStr);
        console.log(endTimeStr);
        let countDown = {};

        // 对结束时间进行处理渲染到页面
        let startTime = new Date(startTimeStr).getTime();
        let endTime = new Date(endTimeStr).getTime();
        // 如果活动未结束，对时间进行处理
        if (nowTime > endTime) {
            self.isStarted = true;
            countDown = {
                day: '0',
                hour: '00',
                minute: '00',
                second: '00'
            };
        } else {
            var time;
            if (nowTime >= startTime) {
                self.isStarted = true;
                time = (endTime - nowTime) / 1000;
            } else {
                time = (startTime - nowTime) / 1000;
            }
            let day = parseInt(time / (60 * 60 * 24));
            let hou = parseInt((time % (60 * 60 * 24)) / 3600);
            let min = parseInt(((time % (60 * 60 * 24)) % 3600) / 60);
            let sec = parseInt(((time % (60 * 60 * 24)) % 3600) % 60);
            countDown = {
                day: day,
                hour: self.timeFormat(hou),
                minute: self.timeFormat(min),
                second: self.timeFormat(sec)
            };
        }
        // 渲染，然后每隔一秒执行一次倒计时函数
        self.countTime = countDown;
        self.$apply();
        if (self.timer) {
            clearInterval(self.timer);
        }
        self.timer = setInterval(function() {
            if (self.countTime.second > 0) {
                self.countTime.second--;
            } else if (self.countTime.minute > 0) {
                self.countTime.second = 59;
                self.countTime.minute--;
            } else if (self.countTime.hour > 0) {
                self.countTime.second = 59;
                self.countTime.minute = 59;
                self.countTime.hour--;
            } else if (self.countTime.day > 0) {
                self.countTime.hour = 23;
                self.countTime.second = 59;
                self.countTime.minute = 59;
                self.countTime.day--;
            } else {
                nowTime = new Date().getTime();
                if (nowTime >= endTime) {
                    clearInterval(this);
                } else if (nowTime >= startTime) {
                    self.isStarted = true;
                    let time = (endTime - nowTime) / 1000;
                    let day = parseInt(time / (60 * 60 * 24));
                    let hou = parseInt((time % (60 * 60 * 24)) / 3600);
                    let min = parseInt(((time % (60 * 60 * 24)) % 3600) / 60);
                    let sec = parseInt(((time % (60 * 60 * 24)) % 3600) % 60);
                    self.countTime = {
                        day: day,
                        hour: hou,
                        minute: min,
                        second: sec
                    };
                }
            }
            self.countTime.hour = self.timeFormat(self.countTime.hour);
            self.countTime.minute = self.timeFormat(self.countTime.minute);
            self.countTime.second = self.timeFormat(self.countTime.second);
            self.$apply();
        }, 1000);
        self.$apply();
    }

    async getInitial() {
        var self = this;
        self.color = self.$parent.globalData.color;
        self.isIphoneX = self.$parent.globalData.isIphoneX;

        var latitude = 0.0;
        var longitude = 0.0;
        wx.getLocation({
            type: 'wgs84',
            success: function(res) {
                latitude = res.latitude;
                longitude = res.longitude;
                self.$apply();
                console.log('position: ' + latitude + ' , ' + longitude);
            }
        });
        let shops = await api.getShops({
            query: {
                currentX: latitude,
                currentY: longitude
            }
        });
        var shopClosest = shops.data[0];
        self.shopChoose = shopClosest;
        self.$apply();
    }

    async getBanners() {
        var self = this;
        let banners = await api.getBanners({
            query: {
                shopId: self.shopChoose.id
            }
        });
        self.banner = [];
        for (var i = 0; i < 5; i++) {
            var found = false;
            banners.data.forEach(element => {
                if (element.position == i) {
                    self.banner.push(element.url);
                    found = true;
                }
            });
            if (found) continue;
            self.banner.push('');
        }
        console.log(self.banner);
        self.$apply();
    }

    async getCategory() {
        var self = this;
        let categories = await api.getShopCategory();
        self.category = categories.data;
        console.log(self.category);
        self.$apply();
    }

    async getProduct() {
        var self = this;
        let res = await api.getShopProduct({
            query: {
                shopId: self.shopChoose.id
            }
        });
        self.product = res.data;
        console.log(self.product);
        self.$apply();

        if (self.product.today) {
            self.startTime = self.product.today[0].limitStartTime;
            self.endTime = self.product.today[0].limitEndTime;
        } else {
            self.startTime = new Date().getTime();
            self.endTime = self.startTime;
        }
        self.countDown();
        self.$apply();
    }

    onShow() {
        let self = this;

        var shop = wx.getStorageSync('shopChoose');
        if (shop != '') {
            self.shopChoose = shop;
        }

        self.getBanners();
        self.getProduct();
        self.$apply();
    }

    onShareAppMessage() {
        return {
            title: '放心优选',
            path: '/pages/index/index'
        };
    }

    async onLoad() {
        var self = this;
        self.color = self.$parent.globalData.color;
        self.isIphoneX = self.$parent.globalData.isIphoneX;

        var latitude = 0.0;
        var longitude = 0.0;
        wx.getLocation({
            type: 'wgs84',
            success: function(res) {
                latitude = res.latitude;
                longitude = res.longitude;
                self.$apply();
                console.log('position: ' + latitude + ' , ' + longitude);
            }
        });
        let shops = await api.getShops({
            query: {
                currentX: latitude,
                currentY: longitude
            }
        });
        var shopClosest = shops.data[0];
        self.shopChoose = shopClosest;
        wx.setStorageSync('shopChoose', self.shopChoose);
        self.getBanners();
        self.$apply();
    }
}
</script>
